# workflow to build and push docker image to AWS ECR (Elastic Container Registory)

name: Deploy to ECR

# workflow execution
on:
#   # Triggers the workflow on push, when any cahnges are done in repo on master branch
#   push:
#     branches: [ master ]
  
  # Allow Manually trigger the workflow from GitHuB Action tab
  workflow_dispatch:
  
#Jobs to build, configure and push 
jobs:

  Deployment:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2
   
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build, tag and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: docker_nodejs_demo
        IMAGE_TAG: nodejs_action_demo
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "check values"
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $IMAGE_OUTPUT
        echo "image to use eks" ${{ steps.build-image.outputs.image }}

    # - name: Check values and outputs
    #   run: | 
    #     echo "check values"
    #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $IMAGE_OUTPUT
    #     echo "image to use eks" ${{ steps.build-image.outputs.image }}

    # - name: Deploy to EKS
    #   uses: aws-actions/amazon-eks-deploy@v1
    #   env: 
    #      EKS_CLUSTER: eks-cluster-01
    #   with:
    #     eks-cluster: ${{ env.EKS_CLUSTER }}
    #     image: ${{ steps.build-image.outputs.image }}





          
